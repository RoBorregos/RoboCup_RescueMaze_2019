//PROGRAMA INO. ROBORREGOS.
//RESCUE MAZE JR.
//CREADO POR ROBORREGOS CHARLIE 2019.

#include <MotoresB.h>
#include <NewPing.h>
#include <Adafruit_VL53L0X.h>
#include <Servo.h>
#include <Wire.h>
#include <Rampa.h>
#include <Adafruit_TCS34725.h>
#include <Adafruit_MLX90614.h>
#include <StackArray.h>
#include <QueueArray.h>

#define MAX_DISTANCE 220
#define ECHO_PIN_E 49
#define TRIGGER_PIN_E 48
#define TRIGGER_PIN_A 42
#define ECHO_PIN_A 43
#define TRIGGER_PIN_DE   46
#define ECHO_PIN_DE      47
#define TRIGGER_PIN_DA 40
#define ECHO_PIN_DA 41
#define TRIGGER_PIN_IE   44
#define ECHO_PIN_IE     45
#define TRIGGER_PIN_IA 38
#define ECHO_PIN_IA 39

struct point{
  byte a, b, cost;
};

struct direcciones
{
  byte px, py;
};

MotoresB robot;
Rampa subir;
NewPing sonarE(TRIGGER_PIN_E, ECHO_PIN_E, MAX_DISTANCE); 
NewPing sonarA(TRIGGER_PIN_A, ECHO_PIN_A, MAX_DISTANCE); 
NewPing sonarDE(TRIGGER_PIN_DE, ECHO_PIN_DE, MAX_DISTANCE); 
NewPing sonarDA(TRIGGER_PIN_DA, ECHO_PIN_DA, MAX_DISTANCE); 
NewPing sonarIE(TRIGGER_PIN_IE, ECHO_PIN_IE, MAX_DISTANCE);  
NewPing sonarIA(TRIGGER_PIN_IA, ECHO_PIN_IA, MAX_DISTANCE);  
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_700MS, TCS34725_GAIN_1X);
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
Servo myservo;
direcciones d[15][15];

byte menor = 100;
char moves[100];
byte BFSx;
byte BFSy;
bool pasado = false;
char orientacion = 'N';
char pasados[15][15][2];
bool blackTile[15][15][2];
bool victimas[15][15][2];
bool negro = false;
byte x = 7;
byte y = 7; 
byte z = 0;
int distanciaE;
int distanciaA;
int distanciaDE;
int distanciaDA;
int distanciaIE;
int distanciaIA;
int negroRmenor=100;
int negroRmayor=1800;
int negroGmenor=100;
int negroGmayor=500;
int negroBmenor=100;
int negroBmayor=500;
byte contador = 0;
byte ledAzul= 22;
byte ledAmarillo= 23;
int mapa[15][15];
bool pN[15][15][2];
bool pE[15][15][2];
bool pO[15][15][2];
bool pS[15][15][2];
bool visitados[15][15];
byte objX, lastX = -1, lastlastX = -1;
byte objY, lastY = -1, lastlastY = -1, objZ;

void clear(){
  direcciones aux;
  aux.px = -1;
  aux.py = -1;
  for(byte i = 0;  i < 15; i++){
    for(byte j = 0; j < 15; j++){
      mapa[i][j] = 0;
      d[i][j] = aux;
      visitados[i][j] = false;
    }
  }

  mapa[objX][objY] = 99;

  for(byte i = 0; i < 100; i++)
    {
      moves[i] = 'z';
    }
  

  for(byte i = 0;  i < 15; i++){
    for(byte j = 0; j < 15; j++){
      if(blackTile[i][j][z] == true)
        mapa[i][j] = -1;
      if(pasados[i][j][z] == 'I' || pasados[i][j][z] == 'P')
        mapa[i][j] = -1;
    }}

    /*for(byte i=0; i<15; i++){
    for(byte j=0;j<15;j++){
      if(mapa[i][j] == -1)
        {
          Serial.print("#");
        }
        /*else if(pE[i][j] == true)
          {
            Serial.print("/");
          }
          else if(pO[i][j] == true)
          {
            Serial.print("|");
          }
          else if(pN[i][j] == true)
          {
            Serial.print("-");
          }
          else if(pS[i][j] == true)
          {
            Serial.print("~");
          }
        else{
      Serial.print(mapa[i][j]);}
      Serial.print("      ");
    }
    Serial.println("");
  }
  Serial.println(" ");*/
}

void bfs(){
  QueueArray <point> hijos;
  point aux, aux2;
  aux.a = x;
  aux.b = y;
  aux.cost = 0;
  visitados[x][y] = true;
  hijos.push(aux);

  while(!hijos.isEmpty()){
    aux = hijos.front();
    hijos.pop();
    visitados[aux.a][aux.b] = true;
    //Derecha
    if(!visitados[aux.a][aux.b+1] && mapa[aux.a][aux.b+1] != -1 && mapa[aux.a][aux.b+1] != 99 && aux.a >= 0 && aux.a < 4 && aux.b+1 >= 0 && aux.b+1 < 4 && pE[aux.a][aux.b][z] == false){
      mapa[aux.a][aux.b+1] = aux.cost + 1;
      aux2.cost = aux.cost + 1;

      aux2.a = aux.a;
      aux2.b = aux.b+1;
      d[aux.a][aux.b+1] = {aux.a,aux.b};
      hijos.push(aux2);

    }
    //Izquierda
    if(!visitados[aux.a][aux.b-1] && mapa[aux.a][aux.b-1] != -1 && mapa[aux.a][aux.b-1] != 99 && aux.a >= 0 && aux.a < 4 && aux.b-1 >= 0 && aux.b-1 < 4 && pO[aux.a][aux.b][z] == false){
      mapa[aux.a][aux.b-1] = aux.cost + 1;
      aux2.cost = aux.cost + 1;

      aux2.a = aux.a;
      aux2.b = aux.b-1;
      d[aux.a][aux.b-1] = {aux.a,aux.b};
      hijos.push(aux2);
    }
    //ENFRENTE
    if(!visitados[aux.a+1][aux.b] && mapa[aux.a+1][aux.b] != -1 && mapa[aux.a+1][aux.b] != 99 && aux.a+1 >= 0 && aux.a+1 < 4 && aux.b >= 0 && aux.b < 4 && pS[aux.a][aux.b][z] == false){


      mapa[aux.a+1][aux.b] = aux.cost + 1;
      aux2.cost = aux.cost + 1;
      aux2.a = aux.a+1;
      aux2.b = aux.b;
      d[aux.a+1][aux.b] = {aux.a,aux.b};
      hijos.push(aux2);
    }
    //ATRAS
    if(!visitados[aux.a-1][aux.b] && mapa[aux.a-1][aux.b] != -1 && mapa[aux.a-1][aux.b] != 99 && aux.a-1 >= 0 && aux.a-1 < 4 && aux.b >= 0 && aux.b < 4  && pN[aux.a][aux.b][z] == false){
      if(mapa[aux.a-1][aux.b] == -2){
        mapa[aux.a-1][aux.b] = aux.cost + 10;
        aux2.cost = aux.cost + 10;
      }else{
        mapa[aux.a-1][aux.b] = aux.cost + 1;
        aux2.cost = aux.cost + 1;
      }

      aux2.a = aux.a-1;
      aux2.b = aux.b;
      d[aux.a-1][aux.b] = {aux.a,aux.b};
      hijos.push(aux2);
    }


  }


}

void findp(){
  byte contador = 0;
  BFSx = objX;
  BFSy = objY;
  while(mapa[BFSx][BFSy] != 0){

    if((mapa[BFSx][BFSy+1] < menor) && (mapa[BFSx][BFSy+1] != -1) && (visitados[BFSx][BFSy+1] == true) && BFSx >= 0 && BFSy+1 >= 0 && BFSx < 4 && BFSy+1 < 4 && (pE[BFSx][BFSy][z] == false)){
      menor = mapa[BFSx][BFSy+1];
      moves[contador] = 'i';
        ++contador;
        ++BFSy;}

    if((mapa[BFSx+1][BFSy] < menor) && (mapa[BFSx+1][BFSy] != -1) && (visitados[BFSx+1][BFSy] == true) && BFSx+1 >= 0 && BFSy >= 0 && BFSx+1 < 4 && BFSy < 4 && (pS[BFSx][BFSy][z] == false)){
      menor = mapa[BFSx+1][BFSy];
      moves[contador] = 'f';
          ++contador;
          ++BFSx;}

    if((mapa[BFSx-1][BFSy] < menor) && (mapa[BFSx-1][BFSy] != -1) && (visitados[BFSx-1][BFSy] == true) && BFSx-1 >= 0 && BFSy >= 0 && BFSx-1 < 4 && BFSy < 4 && (pN[BFSx][BFSy][z] == false)){
      menor = mapa[BFSx-1][BFSy];
      moves[contador] = 'a';
            ++contador;
            --BFSx;}

    if((mapa[BFSx][BFSy-1] < menor) && (mapa[BFSx][BFSy-1] != -1) && (visitados[BFSx][BFSy-1] == true) && BFSx >= 0 && BFSy-1 >= 0 && BFSx < 4 && BFSy-1 < 4 && (pO[BFSx][BFSy][z] == false)){
      menor = mapa[BFSx][BFSy-1];
      moves[contador] = 'd';
              ++contador;
              --BFSy;}
  }
  
    char movesOf[contador];
    
    for(byte i = 0, j = contador-1; i < contador; i++, j--)
      {
        movesOf[i] = moves[j];
      }

    for(byte i = 0; i < contador; i++)
      {
        if(movesOf[i] == 'a')
          {
            switch(orientacion)
              {
                case 'N':
                {
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'E':
                {
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'O':
                {
                  robot.moveIzq();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'S':
                {
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
              }

              orientacion = 'S';
          }
          else if(movesOf[i] == 'd')
            {
              switch(orientacion)
              {
                case 'N':
                {
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'E':
                {
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'O':
                {
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveDer();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
                case 'S':
                {
                  robot.moveIzq();
                  robot.detenerse();
                  delay(100);
                  robot.moveAdelante();
                  delay(925);
                  robot.detenerse();
                  delay(100);
                } break;
              }

              orientacion = 'E';
            }
            else if(movesOf[i] == 'i')
              {
                switch(orientacion)
                  {
                    case 'N':
                    {
                      robot.moveIzq();
                      robot.detenerse();
                      delay(100);
                      robot.moveAdelante();
                      delay(925);
                      robot.detenerse();
                      delay(100);
                    } break;
                    case 'E':
                    {
                      robot.moveDer();
                      robot.detenerse();
                      delay(100);
                      robot.moveDer();
                      robot.detenerse();
                      delay(100);
                      robot.moveAdelante();
                      delay(925);
                      robot.detenerse();
                      delay(100);
                    } break;
                    case 'O':
                    {
                      robot.moveAdelante();
                      delay(925);
                      robot.detenerse();
                      delay(100);
                    } break;
                    case 'S':
                    {
                      robot.moveDer();
                      robot.detenerse();
                      delay(100);
                      robot.moveAdelante();
                      delay(925);
                      robot.detenerse();
                      delay(100);
                    } break;
                  }

                  orientacion = 'O';
              }
              else if(movesOf[i] == 'f')
                {
                  switch(orientacion)
                    {
                      case 'N':
                      {
                        robot.moveAdelante();
                        delay(925);
                        robot.detenerse();
                        delay(100);
                      } break;
                      case 'E':
                      {
                        robot.moveIzq();
                        robot.detenerse();
                        delay(100);
                        robot.moveAdelante();
                        delay(925);
                        robot.detenerse();
                        delay(100);
                      } break;
                      case 'O':
                      {
                        robot.moveDer();
                        robot.detenerse();
                        delay(100);
                        robot.moveAdelante();
                        delay(925);
                        robot.detenerse();
                        delay(100);
                      } break;
                      case 'S':
                      {
                        robot.moveDer();
                        robot.detenerse();
                        delay(100);
                        robot.moveDer();
                        robot.detenerse();
                        delay(100);
                        robot.moveAdelante();
                        delay(925);
                        robot.detenerse();
                        delay(100);
                      } break;
                    }
                }
      }
}

int distanciaEnfrente()
{
  int uSDE = sonarE.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;

  Serial.print("Distancia Enfrente= ");
  Serial.println(distancia);
  return distancia;
}

int distanciaAtras()
{
  int uSDE = sonarA.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;

  Serial.print("Distancia Atras= ");
  Serial.println(distancia);
  return distancia;
}

int distanciaDerechaEnfrente()
{
  int uSDE = sonarDE.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;

  
  Serial.print("Distancia Derecha Enfrente= ");
  Serial.println(distancia);
  return distancia;
}

int distanciaDerechaAtras()
{
  int uSDE = sonarDA.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;


  Serial.print("Distancia Derecha Atras= ");
  Serial.println(distancia);
  return distancia;
}

int distanciaIzquierdaEnfrente()
{
  int uSDE = sonarIE.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;

  Serial.print("Distancia Izquierda Enfrente= ");
  Serial.println(distancia);
  return distancia;
}

int distanciaIzquierdaAtras()
{
  int uSDE = sonarIA.ping_median();
  int distancia;
  byte turns = 0;
  distancia = uSDE / US_ROUNDTRIP_CM;
  
  if(distancia < 4 && turns < 3){
  distancia = uSDE / US_ROUNDTRIP_CM;
  turns++;}
  else if(distancia < 4)
  distancia = 2000;

  Serial.print("Distancia Izquierda Atras= ");
  Serial.println(distancia);
  Serial.println("*****");
  return distancia;
}

void ignore()
{
  
}

bool isBlack()
{
  int r, g, b, c, colorTemp, lux;
  
  tcs.getRawData(&r, &g, &b, &c);
  delay(300);
  colorTemp = tcs.calculateColorTemperature(r, g, b);
  lux = tcs.calculateLux(r, g, b); 
  if((r<=negroRmayor)){
  blackTile[x][y][z] = true;
  return true;}
  else
  return false;
}


void hayVictima()
{
  byte pos;
    digitalWrite(22, HIGH);
    delay(5000);
  for (pos = 117; pos <= 200; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(5);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 200; pos >= 117; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(5);                       // waits 15ms for the servo to reach the position
  }
  digitalWrite(22, LOW);
}

void buscarObjetivo()
{
  clear();
  bfs();
  findp();

  x = objX;
  y = objY;
}

void alineaRobot(){
    distanciaE=distanciaEnfrente();
    distanciaA=distanciaAtras();
    distanciaDE=distanciaDerechaEnfrente();
    distanciaDA=distanciaDerechaAtras();
    distanciaIE=distanciaIzquierdaEnfrente();
    distanciaIA=distanciaIzquierdaAtras();
    if((distanciaDE!=distanciaDA||distanciaIE!=distanciaIA)&&((distanciaDE<20 && distanciaDA<20)||(distanciaIE<20 && distanciaIA<20))){
  Serial.println("Desalineado******************");
  if(distanciaDE>distanciaDA && distanciaIE<distanciaIA){
    while(distanciaDE>distanciaDA && distanciaIE<distanciaIA){
       robot.moveDerAcomodo();
       digitalWrite(ledAzul, HIGH); 
       distanciaDE=distanciaDerechaEnfrente();
       distanciaDA=distanciaDerechaAtras();
       delay(50);
    }  
    robot.detenerse();
    digitalWrite(ledAzul, LOW);    
  }
   
  if(distanciaDE<distanciaDA && distanciaIE>distanciaIA){
    while(distanciaDE<distanciaDA && distanciaIE>distanciaIA){
     robot.moveIzqAcomodo();  
   digitalWrite(ledAmarillo, HIGH);
   distanciaIE=distanciaIzquierdaEnfrente();
   distanciaIA=distanciaIzquierdaAtras();
   delay(50);
    } 
   robot.detenerse();
   digitalWrite(ledAmarillo, LOW);  
}
}
delay(500);
}

void setup() {
  Serial.begin(9600);
  mlx.begin();  
  myservo.write(117);
  myservo.attach(37);
  pinMode(29, INPUT_PULLUP);
  pinMode(32, INPUT_PULLUP);
  pinMode(22, OUTPUT);
  
  for(byte i = 0; i < 18; i++)
    for(byte j = 0; j < 18; j++)
      for(byte k = 0; k < 2; k++)
        {
          pasados[i][j][k] = 'I';
          victimas[i][j][k] = false;
          blackTile[i][j][k] = false;
          pN[i][j][k] = false;
          pE[i][j][k] = false;
          pO[i][j][k] = false;
          pS[i][j][k] = false;
        }
  robot.setup();
  subir.setup();

  if (!tcs.begin()) 
  {
    Serial.println("Error al iniciar TCS34725");
    while (1) delay(1000);
  }
  
  pasados[x][y][z] = 'V';
  
  delay(2000);
}

void loop() {

byte pos;
    byte valor = 0;

    for(byte j=0; j<90; j++){
    if((digitalRead(32)==LOW)&&j<80)
    {
      robot.acomodoI();
      delay(280);
      robot.detenerse();
      j=j-15;
    }
    else if((digitalRead(29)==LOW)&&j<80){
      robot.acomodoD();
      delay(280);
      robot.detenerse();
      j=j-15;
    }
    robot.moveAdelante();
    delay(1);
     
    if(mlx.readObjectTempC() > 27 && pasado == false){
      pasado = true;
      robot.detenerse();
      victimas[x][y][z] == true;
      hayVictima();
}
    }

    pasado = false;

  valor = subir.detectaRampa();
  if(valor != 0){
  delay(250);
  if(z == 1)
  z = 0;
  else
  z = 1;}
  
  robot.detenerse();
  delay(50);
  alineaRobot();
  distanciaE = distanciaEnfrente();

  if(distanciaE > 6 && distanciaE < 15)
   {
    while(distanciaE > 6){
      distanciaE = distanciaEnfrente();
      robot.moveAdelanteLento();}
   }

   robot.detenerse();

  switch(orientacion)
    {
      case 'N':
        x--;
        break;
      case 'E':
        y++;
        break;
      case 'O':
        y--;
        break;
       case 'S':
       x++;
       break;  
    }

   pasados[x][y][z] = 'V';


     negro = isBlack();

  if(negro == false)
  {
   distanciaDE = distanciaDerechaEnfrente();
   distanciaIE = distanciaIzquierdaEnfrente();
   distanciaE = distanciaEnfrente();

  if(distanciaDE < 15)
    {
      switch(orientacion)
        {
          case 'N':
            pE[x][y][z] = true;
            break;
          case 'E':
            pS[x][y][z] = true;
            break;
          case 'O':
            pN[x][y][z] = true;
            break;
          case 'S':
            pO[x][y][z] = true;
        }
    }

  if(distanciaIE < 15)
    {
      switch(orientacion)
        {
          case 'N':
            pO[x][y][z] = true;
            break;
          case 'E':
            pN[x][y][z] = true;
            break;
          case 'O':
            pS[x][y][z] = true;
            break;
          case 'S':
            pE[x][y][z] = true;
        }
    }

  if(distanciaE < 15)
    {
      switch(orientacion)
        {
          case 'N':
            pN[x][y][z] = true;
            break;
          case 'E':
            pE[x][y][z] = true;
            break;
          case 'O':
            pO[x][y][z] = true;
            break;
          case 'S':
            pS[x][y][z] = true;
        }
    }

    switch(orientacion)
    {
      case 'N':
        {
          if(pasados[x][y+1][z] == 'I' && pE[x][y][z] == false)
            {
              pasados[x][y+1][z] = 'P';
            }

          if(pasados[x-1][y][z] == 'I' && pN[x][y][z] == false)
            {
              pasados[x-1][y][z] = 'P';

              if(pE[x][y][z] == false)
                {
                  if(lastX == -1)
                    {
                      lastX = x-1;
                      lastY = y;
                    }
                    else
                      {
                        lastlastX = lastX;
                        lastX = x-1;
                        lastlastY = lastY;
                        lastY = y;
                      }
                }
            }

            if(pasados[x][y-1][z] == 'I' && pO[x][y][z] == false)
              {
                pasados[x][y-1][z] = 'P';

                if(pE[x][y][z] == false && pN[x][y][z] == false)
                  {
                    lastlastX = x;
                    lastlastY = y-1;
                  }
                  else if(pE[x][y][z] == false || pN[x][y][z] == false)
                    {
                      if(lastX == -1)
                        {
                          lastX = x;
                          lastY = y-1;
                        }
                        else
                          {
                            lastlastX = lastX;
                            lastX = x;
                            lastlastY = lastY;
                            lastY = y-1;
                          }
                    }
              }
        } break;
      case 'E':
        {
          if(pasados[x+1][y][z] == 'I' && pS[x][y][z] == false)
            {
              pasados[x+1][y][z] = 'P';
            }

          if(pasados[x][y+1][z] == 'I' && pE[x][y][z] == false)
            {
              pasados[x][y+1][z] = 'P';

              if(pS[x][y][z] == false)
                {
                  if(lastX == -1)
                    {
                      lastX = x;
                      lastY = y+1;
                    }
                    else
                      {
                        lastlastX = lastX;
                        lastX = x;
                        lastlastY = lastY;
                        lastY = y+1;
                      }
                }
            }

            if(pasados[x-1][y][z] == 'I' && pN[x][y][z] == false)
              {
                pasados[x-1][y][z] = 'P';

                if(pS[x][y][z] == false && pE[x][y][z] == false)
                  {
                    lastlastX = x-1;
                    lastlastY = y;
                  }
                  else if(pS[x][y][z] == false || pE[x][y][z] == false)
                    {
                      if(lastX == -1)
                        {
                          lastX = x-1;
                          lastY = y;
                        }
                        else
                          {
                            lastlastX = lastX;
                            lastX = x-1;
                            lastlastY = lastY;
                            lastY = y;
                          }
                    }
              }
        } break;
      case 'O':
        {
          if(pasados[x-1][y][z] == 'I' && pN[x][y][z] == false)
            {
              pasados[x-1][y][z] = 'P';
            }

          if(pasados[x][y-1][z] == 'I' && pO[x][y][z] == false)
            {
              pasados[x][y-1][z] = 'P';

              if(pN[x][y][z] == false)
                {
                  if(lastX == -1)
                    {
                      lastX = x;
                      lastY = y-1;
                    }
                    else
                      {
                        lastlastX = lastX;
                        lastX = x;
                        lastlastY = lastY;
                        lastY = y-1;
                      }
                }
            }

            if(pasados[x+1][y][z] == 'I' && pS[x][y][z] == false)
              {
                pasados[x+1][y][z] = 'P';

                if(pN[x][y][z] == false && pO[x][y][z] == false)
                  {
                    lastlastX = x+1;
                    lastlastY = y;
                  }
                  else if(pN[x][y][z] == false || pO[x][y][z] == false)
                    {
                      if(lastX == -1)
                        {
                          lastX = x+1;
                          lastY = y;
                        }
                        else
                          {
                            lastlastX = lastX;
                            lastX = x+1;
                            lastlastY = lastY;
                            lastY = y;
                          }
                    }
              }
        } break;
      case 'S':
        {
          if(pasados[x][y-1][z] == 'I' && pO[x][y][z] == false)
            {
              pasados[x][y-1][z] = 'P';
            }

          if(pasados[x+1][y][z] == 'I' && pS[x][y][z] == false)
            {
              pasados[x+1][y][z] = 'P';

              if(pO[x][y][z] == false)
                {
                  if(lastX == -1)
                    {
                      lastX = x+1;
                      lastY = y;
                    }
                    else
                      {
                        lastlastX = lastX;
                        lastX = x+1;
                        lastlastY = lastY;
                        lastY = y;
                      }
                }
            }

            if(pasados[x][y+1][z] == 'I' && pE[x][y][z] == false)
              {
                pasados[x][y+1][z] = 'P';

                if(pO[x][y][z] == false && pS[x][y][z] == false)
                  {
                    lastlastX = x;
                    lastlastY = y+1;
                  }
                  else if(pO[x][y][z] == false || pS[x][y][z] == false)
                    {
                      if(lastX == -1)
                        {
                          lastX = x;
                          lastY = y+1;
                        }
                        else
                          {
                            lastlastX = lastX;
                            lastX = x;
                            lastlastY = lastY;
                            lastY = y+1;
                          }
                    }
              }
        } break;
    }
    
    if(distanciaDE > 15 && orientacion == 'N' && pasados[x][y+1][z] == 'P')
      {
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'E';

        if(contador >= 3 && distanciaIE < 15)
          {
            contador = 0;
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'E' && pasados[x+1][y][z] == 'P')
      {
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'S';

        if(contador >= 3 && distanciaIE < 15)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'S' && pasados[x][y-1][z] == 'P')
      {
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'O';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'O' && pasados[x-1][y][z] == 'P')
      {
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'N';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaE > 15 && orientacion == 'N' && pasados[x-1][y][z] == 'P')
      {
        ignore();
      }
      else if(distanciaE > 15 && orientacion == 'E' && pasados[x][y+1][z] == 'P')
      {
        ignore();
      }
      else if(distanciaE > 15 && orientacion == 'S' && pasados[x-1][y][z] == 'P')
      {
        ignore();
      }
      else if(distanciaE > 15 && orientacion == 'O' && pasados[x][y-1][z] == 'P')
      {
        ignore();
      }
      else if(distanciaIE > 15 && orientacion == 'N' && pasados[x][y-1][z] == 'P')
      {
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'O';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'E' && pasados[x-1][y][z] == 'P')
      {
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'N';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'S' && pasados[x][y+1][z] == 'P')
      {
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'E';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'O' && pasados[x+1][y][z] == 'P')
      {
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'S';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else
      {
        if(pasados[lastX][lastY][z] == 'P')
          {
            objX = lastX;
            objY = lastY;
          }
          else if(pasados[lastlastX][lastlastY][z] == 'P')
            {
              objX = lastlastX;
              objY = lastlastY;
            }
            else
              {
                for(int i = 0; i < 15; i++)
                  for(int j = 0; j < 15; j++)
                    {
                      if(pasados[i][j][z] == 'P')
                        {
                          objX = i;
                          objY = j;
                        }
                        else
                          {
                            objX = 7;
                            objY = 7;
                            objZ = 0;
                          }
                    }
              }
        buscarObjetivo();
      }
  }
  else
    {
      robot.moveAtras();
      delay(890);
      robot.detenerse();
      delay(200);

      switch(orientacion)
       {
      case 'N':
        x++;
        break;
      case 'E':
        y--;
        break;
      case 'O':
        y++;
        break;
       case 'S':
       x--;
       break;  
      }

      distanciaDE = distanciaDerechaEnfrente();
      distanciaIE = distanciaIzquierdaEnfrente();

      if(distanciaDE > 15 && orientacion == 'N' && pasados[x][y+1][z] == 'P')
      {
        contador++;
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'E';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'E' && pasados[x+1][y][z] == 'P')
      {
        contador++;
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'S';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'S' && pasados[x][y-1][z] == 'P')
      {
        contador++;
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'O';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaDE > 15 && orientacion == 'O' && pasados[x-1][y][z] == 'P')
      {
        contador++;
        robot.moveDer();
        robot.detenerse();
        delay(200);
        orientacion = 'N';

        if(contador >= 3 && distanciaIE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'N' && pasados[x][y-1][z] == 'P')
      {
        contador++;
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'O';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'E' && pasados[x-1][y][z] == 'P')
      {
        contador++;
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'N';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'S' && pasados[x][y+1][z] == 'P')
      {
        contador++;
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'E';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else if(distanciaIE > 15 && orientacion == 'O' && pasados[x+1][y][z] == 'P')
      {
        contador++;
        robot.moveIzq();
        robot.detenerse();
        delay(200);
        orientacion = 'S';

        if(contador >= 3 && distanciaDE <20)
          {
            robot.moveAtras();
            delay(300);
            contador  = 0;
            robot.moveAdelante();
            delay(200);
            robot.detenerse();
            delay(100);
          }
      }
      else{
        contador = contador +2;;
        robot.moveDer();
        robot.detenerse();
        delay(200);
        robot.moveDer();
        robot.detenerse();
        delay(200);
        if(orientacion == 'N')
          orientacion = 'S';
          else if(orientacion == 'E')
            orientacion = 'O';
            else if(orientacion == 'S')
              orientacion = 'N';
                else if(orientacion == 'O')
                  orientacion = 'E';

       distanciaE = distanciaEnfrente();

       if(distanciaE > 15)
        {
          ignore();
        }
        else
        {
          if(distanciaE > 6 && distanciaE < 15)
           {
            contador++;
            while(distanciaE > 6){
              distanciaE = distanciaEnfrente();
              robot.moveAdelanteLento();}
           }
          robot.moveDer();
          robot.detenerse();
          delay(200);
          switch(orientacion)
          {
            case 'N':
              orientacion = 'E';
              break;
             case 'E':
              orientacion = 'S';
              break;
             case 'S':
              orientacion = 'O';
              break;
             case 'O':
              orientacion = 'N';
              break;
          }
        }
      }
    }
  
}
